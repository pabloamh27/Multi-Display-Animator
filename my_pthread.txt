#include <features.h>
#include <endian.h>
#include <sched.h>
#include <time.h>
#include <bits/pthreadtypes.h>
#include <stdio.h>
#include <setjmp.h>
#include <bits/wordsize.h>
#include <bits/types/struct_timespec.h>

#include <sys/types.h>
#include <sys/syscall.h>



typedef struct my_thread_attr{
	unsigned long stack_size;
}my_thread_attr_t;

typedef struct my_thread{

	pid_t t_id;

}my_thread_t;



typedef struct my_thread_data{
	
	pid_t t_id; 				/* ID del hilo*/
	int estado; 				/* estado*/

	void * (*funcion) (void *); /* PC*/
	void *args; 				/* argumentos */
	void *retval; 				/* Valor de retorno */

	jmp_buf buffer;
	
	struct my_thread_data *bloqueando; /* hilo que esta bloqueando a este hilo */
	struct my_thread_data *siguiente;  /* siguiente hilo en la cola */

}hilo;

extern int my_pthread_create(pthread_t *__nuevo_thread,
                           const pthread_attr_t *__attr,
                           void *(*__rutina) (void *),
void *__arg) __THROWNL __nonnull ((1, 3));


void my_thread_end(void *retval){


}

pid_t my_thread_gettid();
